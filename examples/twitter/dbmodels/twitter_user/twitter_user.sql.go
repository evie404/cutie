// Code generated by sqlc. DO NOT EDIT.
// source: twitter_user.sql

package twitter_user

import (
	"context"
)

const getIDByScreenName = `-- name: GetIDByScreenName :one
SELECT id FROM twitter_users WHERE screen_name = $1 LIMIT 1
`

func (q *Queries) GetIDByScreenName(ctx context.Context, screenName string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getIDByScreenName, screenName)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getScreenNameByID = `-- name: GetScreenNameByID :one
SELECT screen_name FROM twitter_users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetScreenNameByID(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getScreenNameByID, id)
	var screen_name string
	err := row.Scan(&screen_name)
	return screen_name, err
}

const getTwitterUserByID = `-- name: GetTwitterUserByID :one
SELECT id, screen_name, name, description, protected, verified, twitter_data, twitter_created_at, created_at, updated_at FROM twitter_users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTwitterUserByID(ctx context.Context, id int64) (TwitterUser, error) {
	row := q.db.QueryRowContext(ctx, getTwitterUserByID, id)
	var i TwitterUser
	err := row.Scan(
		&i.ID,
		&i.ScreenName,
		&i.Name,
		&i.Description,
		&i.Protected,
		&i.Verified,
		&i.TwitterData,
		&i.TwitterCreatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTwitterUserByScreenName = `-- name: GetTwitterUserByScreenName :one
SELECT id, screen_name, name, description, protected, verified, twitter_data, twitter_created_at, created_at, updated_at FROM twitter_users WHERE screen_name = $1 LIMIT 1
`

func (q *Queries) GetTwitterUserByScreenName(ctx context.Context, screenName string) (TwitterUser, error) {
	row := q.db.QueryRowContext(ctx, getTwitterUserByScreenName, screenName)
	var i TwitterUser
	err := row.Scan(
		&i.ID,
		&i.ScreenName,
		&i.Name,
		&i.Description,
		&i.Protected,
		&i.Verified,
		&i.TwitterData,
		&i.TwitterCreatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
