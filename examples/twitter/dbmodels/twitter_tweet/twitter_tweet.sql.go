// Code generated by sqlc. DO NOT EDIT.
// source: twitter_tweet.sql

package twitter_tweet

import (
	"context"
)

const getTweetByID = `-- name: GetTweetByID :one
SELECT id, user_id, text, source, in_reply_to_status_id, in_reply_to_user_id, in_reply_to_screen_name, quoted_status_id, is_quote_status, twitter_data, twitter_created_at, created_at, updated_at FROM twitter_tweets WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTweetByID(ctx context.Context, id int64) (TwitterTweet, error) {
	row := q.db.QueryRowContext(ctx, getTweetByID, id)
	var i TwitterTweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Text,
		&i.Source,
		&i.InReplyToStatusID,
		&i.InReplyToUserID,
		&i.InReplyToScreenName,
		&i.QuotedStatusID,
		&i.IsQuoteStatus,
		&i.TwitterData,
		&i.TwitterCreatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTweetsByUserID = `-- name: GetTweetsByUserID :many
SELECT id, user_id, text, source, in_reply_to_status_id, in_reply_to_user_id, in_reply_to_screen_name, quoted_status_id, is_quote_status, twitter_data, twitter_created_at, created_at, updated_at FROM twitter_tweets WHERE user_id = $1
`

func (q *Queries) GetTweetsByUserID(ctx context.Context, userID int64) ([]TwitterTweet, error) {
	rows, err := q.db.QueryContext(ctx, getTweetsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TwitterTweet
	for rows.Next() {
		var i TwitterTweet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Text,
			&i.Source,
			&i.InReplyToStatusID,
			&i.InReplyToUserID,
			&i.InReplyToScreenName,
			&i.QuotedStatusID,
			&i.IsQuoteStatus,
			&i.TwitterData,
			&i.TwitterCreatedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
